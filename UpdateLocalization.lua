#!/usr/bin/lua
--[[
UpdateLocalization.lua - update localization file from wowace.com localization system

Copyright (C) 2009 Adirelle - adirelle@tagada-team.net

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
--]]

local GetPage
do
	local ok, curl = pcall(require, "curl")
	local c, writefuncfactory, perform
	if ok then
		print('Using curl library')
		c = curl.easy_init()
		function writefuncfactory(t)
			return function(data) 
				table.insert(t, data)
				return data:len()
			end
		end
		function perform()
			local status, message = c:perform()
			if status == 0 then			
				return true
			else
				error(message, 3)
			end
		end
	else
		curl = require("luacurl")
		print('Using laucurl library')
		c = curl.new()
		function writefuncfactory(t)
			return function(_, data) 
				table.insert(t, data)
				return data:len()
			end
		end
		function perform()
			local status, message = c:perform()
			if status then			
				return true
			else
				error(message, 3)
			end
		end
	end
	function GetPage(url, params)
		if params then
			local p = {}
			for k,v in pairs(params) do
				table.insert(p, curl.escape(k)..'='..curl.escape(v))
			end
			url = url .. '?' .. table.concat(p, "&")
		end
		c:setopt(curl.OPT_URL, url)
		local t = {}
		c:setopt(curl.OPT_WRITEFUNCTION, writefuncfactory(t))
		if perform() then
			return table.concat(t, "")
		end
	end
end

local FILE = "Localization.lua"
local NEWFILE = FILE..'.new'

io.input(FILE)
io.output(NEWFILE)

local LANGUAGES = { "frFR", "deDE", "esMX", "ruRU", "esES", "zhTW", "zhCN", "koKR" }

for line in io.lines() do
	io.write(line.."\n")
	local project, paramString = line:match('%%Localization:%s+([^%s]+)%s*(.*)$')
	if project then
		print("Found localization tag for project "..project.." with parameters "..paramString)
		io.write("-- AUTOMATICALLY GENERATED BY UpdateLocalization.lua\n")
		io.write("-- ANY CHANGE BELOW THIS LINE WILL BE LOST ON NEXT UPDATE\n")
		io.write("-- CHANGES SHOULD BE MADE USING http://www.wowace.com/addons/"..project.."/localization/\n\n")
		local url = ("http://www.wowace.com/addons/%s/localization/export.txt"):format(project)
		local params = {
			namespace = '',
			format = 'lua_additive_table',
			handle_unlocalized = 'ignore',
			escape_non_ascii = nil,
			handle_subnamespaces = 'none',
		}
		if paramString:len() then
			for name,value in paramString:gmatch("(%w+)=(%S+)") do
				params[name] = value
			end
		end
		local gotOne = false
		local test = 'if'
		for i,language in ipairs(LANGUAGES) do
			params.language = language
			local l = GetPage(url, params)
			if l and l ~= "" then
				print("Adding "..language.." locales")
				if not gotOne then
					gotOne = true
					io.write('local locale = GetLocale()\n')
				else
					io.write('else')
				end				
				io.write('if locale == "'..language..'" then\n')
				io.write(l)
			else
				print("No "..language.." locales")
			end
		end
		if gotOne then
			io.write("end\n")
		end			
		break
	end
end

io.output():close()
io.input():close()

print('Updating done')

local function renameFile(from, to)
	local ok, msg = os.rename(from, to)
	if ok then
		return true
	else
		print('Cannot rename '..from..' to '..to..': '..msg)
	end
end

local i = 1
while not renameFile(FILE, FILE..'~'..i..'.~') and i < 20 do
	i = i + 1
end	
renameFile(NEWFILE, FILE)

print('Done')
